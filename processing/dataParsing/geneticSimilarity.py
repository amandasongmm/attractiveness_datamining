#
# geneticSimilarity.py
#
# The purpose of this script is to parse in a subset of our data, which will
# be used to compare similarity between identical, non-identical, and
# random twin attractiveness ratings.
#
# Built for Python2 in order to work best with machine learning libraries.
#
# Author: 	Chad Atalla
# Date: 	1/26/2016
#


import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
from scipy import spatial



NUM_SAMPLES = 500



'''
	Label:		ParsePreprocessedData
	Purpose:	Parse in a dataframe generated by the parseData script
'''
# Import the parsed / preprocessed data
data = pd.read_csv('../data/parsedData.csv')



'''
	Label:		Function_addSecondTwin
	Purpose:	Define the function which will be used to add the second twin
				to complete random twin pairs
'''
def addSecondTwin (twinSet):
	# Iterate over each twin and append its twin
	for index, row in twinSet.iterrows():
		twinSet = twinSet.append(data[data.image_id == row['image_id']][data.dataset == row['dataset']][data.twin_pair_id == row['twin_pair_id']][data.twin_id != row['twin_id']])

	# Sort to ensure that twin pairs are in successive rows
	twinSet.sort_values(['dataset', 'twin_pair_id'], inplace=True)
	twinSet = twinSet.reset_index(drop=True)

	return twinSet
	


'''
	Label:		DecideRandomSamples
	Purpose:	Generate a dataframe with random samples of pairs of ratings
				from identical twins, non-identical twins, and random couples
'''
# Generate list of random MZ twins to use
mz_twins = data[data.twin_type == 'MZ'][data.twin_id == 1].sample(NUM_SAMPLES)

# Generate list of random DZ twins to use
dz_twins = data[data.twin_type == 'DZ'][data.twin_id == 1].sample(NUM_SAMPLES)

# Add the second twin
mz_twins = addSecondTwin(mz_twins)
dz_twins = addSecondTwin(dz_twins)

# Generate list of random pairs
rand_twins = data.sample(NUM_SAMPLES)

# Add another random participant who rated that face
for index, row in rand_twins.iterrows():
	rand_twins = rand_twins.append(data[data.image_id == row['image_id']][data.dataset == row['dataset']].sample(1))

	# Sort to ensure that twin pairs are in successive rows
	rand_twins.sort_values(['dataset', 'image_id'], inplace=True)
	rand_twins = rand_twins.reset_index(drop=True)



'''
	Label:		PairDifference
	Purpose:	Calculate the similarity of each pair in the 3 groups
'''
def calcDifference (twinSet):
	distances = [0 for x in range(NUM_SAMPLES)]
	x = 0
	while x < (NUM_SAMPLES*2):
		distances[x/2] = float(twinSet.iloc[x]['rating']) - float(twinSet.iloc[x+1]['rating'])
		distances[x/2] = abs(distances[x/2])
		x = x + 2
	distances = np.nan_to_num(distances)
	return distances

mz_dist = calcDifference(mz_twins)
dz_dist = np.add(calcDifference(dz_twins),.1)
rand_dist = np.add(calcDifference(rand_twins),-.1)




'''
	Label:		VisualizeData
	Purpose:	Plot the sets in different colors, look for clustering
'''
print ''
print 'Distance MZ to DZ ='
print spatial.distance.cosine(mz_dist, dz_dist) 
print 'Distance DZ to Random =' 
print spatial.distance.cosine(dz_dist, rand_dist) 
print 'Distance MZ to Random =' 
print spatial.distance.cosine(mz_dist, rand_dist) 
print ''
print 'Average difference for MZ ='
print np.mean(mz_dist)
print 'Average difference for DZ ='
print np.mean(dz_dist)
print 'Average difference for Random ='
print np.mean(rand_dist)
print ''

yaxis = np.arange(NUM_SAMPLES)

plt.scatter(mz_dist, yaxis, color='red')
plt.scatter(dz_dist, yaxis, color='blue')
plt.scatter(rand_dist, yaxis, color='green')

plt.xlabel('Difference in pair ratings')
plt.ylabel('Red = MZ, Blue = DZ, Green = Random')
plt.show()
